{"version":3,"sources":["components/picture/Picture.module.css","assets/rolling.svg","components/gallery/Gallery.module.css","App.module.css","components/header/Header.module.css","components/picture/Picture.jsx","components/header/Header.jsx","components/gallery/Gallery.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Picture","state","loaded","this","setState","props","id","author","url","correctUrl","split","length","className","styles","wrapper","spinnerWrapper","spinner","src","alt","image","style","display","onLoad","bind","React","Component","defaultProps","Header","header","Gallery","data","number","window","innerHeight","innerWidth","scrollTo","galleryWrapper","picturesWrapper","slice","map","picture","key","onClick","displayNextImages","button","prevState","App","fetch","then","response","json","catch","err","console","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.55008804.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Picture_wrapper__1sG-G\",\"spinnerWrapper\":\"Picture_spinnerWrapper__aOhUR\",\"spinner\":\"Picture_spinner__2RK_6\",\"image\":\"Picture_image__33K8i\",\"show-image\":\"Picture_show-image__10-Kj\",\"id\":\"Picture_id__-5yDi\",\"show-text\":\"Picture_show-text__1Rlip\",\"author\":\"Picture_author__3WIqX\"};","module.exports = __webpack_public_path__ + \"static/media/rolling.cc3d34d9.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"galleryWrapper\":\"Gallery_galleryWrapper__aSmOP\",\"picturesWrapper\":\"Gallery_picturesWrapper__14FH0\",\"button\":\"Gallery_button__2emMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"App_spinner__1A2tc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2qkLE\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Picture.module.css';\r\nimport spinner from '../../assets/rolling.svg'\r\n\r\nclass Picture extends React.Component {\r\n\r\n    state = {\r\n        loaded: false\r\n    }\r\n\r\n    onLoad() {\r\n        this.setState({loaded: true});\r\n    }\r\n\r\n    render() {\r\n        const {id, author, url} = this.props;\r\n        const correctUrl = `http://source.unsplash.com/${url.split(\"/\")[url.split(\"/\").length-1]}`;\r\n\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                {\r\n                    this.state.loaded?\r\n                    null\r\n                    :\r\n                    <div className={styles.spinnerWrapper}>\r\n                        <img className={styles.spinner} src={spinner} alt=\"\"/>\r\n                    </div>\r\n                }\r\n                <img className={styles.image} src={correctUrl} alt=\"photo\" \r\n                style ={this.state.loaded? {} : {display: 'none'}} onLoad={this.onLoad.bind(this)}/>\r\n                <p className={styles.id}>Id: {id}</p>\r\n                <h2 className={styles.author}>Author: {author}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPicture.propTypes = {\r\n    author: PropTypes.string,\r\n    id: PropTypes.string,\r\n    url: PropTypes.string\r\n}\r\n\r\nPicture.defaultProps = {\r\n    author: \"--\",\r\n    id: \"--\"\r\n}\r\n    \r\nexport default Picture;","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = () => (\r\n    <header><h1 className={styles.header}>React Gallery App</h1></header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Picture from '../picture/Picture';\r\nimport styles from './Gallery.module.css';\r\nimport Header from '../header/Header';\r\n\r\nclass Gallery extends React.Component {\r\n\r\n    data = this.props.data;\r\n\r\n    state = {\r\n        number: 0\r\n    }\r\n\r\n    //it scrolls to the top of the website on mobile devices (portrait mode)\r\n    componentDidUpdate() {\r\n        if(window.innerHeight>=window.innerWidth) {\r\n            window.scrollTo(0,0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={styles.galleryWrapper}>\r\n                <Header/>\r\n                <div className={styles.picturesWrapper}>\r\n                    {\r\n                        this.data.slice(this.state.number, this.state.number+3).map(picture => (<Picture {...picture} key={picture.id}/>))\r\n                    }\r\n                </div>\r\n                <button onClick={this.displayNextImages.bind(this)} className={styles.button}>Next!</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    displayNextImages() {\r\n        this.setState(prevState => {\r\n            if(this.state.number < this.data.length - 3) {\r\n                return {number: prevState.number+3};\r\n            }\r\n            return {number:0};\r\n        });\r\n    }\r\n}\r\n\r\nGallery.propTypes = {\r\n    data: PropTypes.array\r\n}\r\n\r\nexport default Gallery;","import React from 'react';\nimport styles from \"./App.module.css\";\nimport Gallery from './components/gallery/Gallery';\nimport spinner from './assets/rolling.svg'\n\n\nclass App extends React.Component {\n\n  state = {\n    data: null,\n  }\n\n  componentDidMount() {\n    fetch('https://picsum.photos/v2/list')\n        .then(response => response.json())\n        .then(data => this.setState({ data }))\n        .catch(err => console.error(err));\n  }\n  \n  render() {\n    return(\n      this.state.data == null?\n      <img className={styles.spinner} src={spinner} alt=\"spinner\"/>\n      :\n      <Gallery data={this.state.data}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}